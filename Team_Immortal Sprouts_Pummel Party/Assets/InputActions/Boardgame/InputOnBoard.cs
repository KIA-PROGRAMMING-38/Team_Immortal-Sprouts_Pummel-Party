//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions/Boardgame/InputOnBoard.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputOnBoard: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputOnBoard()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputOnBoard"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e1bf4480-00ea-4237-ab3e-0bdfef7ff028"",
            ""actions"": [
                {
                    ""name"": ""RouletteTouch"",
                    ""type"": ""Button"",
                    ""id"": ""89f8e80e-7198-4600-98b9-8ddab454f0ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemTouch"",
                    ""type"": ""Button"",
                    ""id"": ""bf420175-982f-478e-b711-237853fc81e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemSelect"",
                    ""type"": ""Button"",
                    ""id"": ""e409764d-1362-4991-a617-1f662cbd9c05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""921a2f1e-56fa-4fb0-a1c5-d963bc65df46"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RouletteTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""555803e4-df74-4b55-bd7f-cdd2feba0b93"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee2977c1-5040-40e4-b0a5-98437d454b4b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ItemControl"",
            ""id"": ""93d7e391-dd2b-4943-8f0a-753eee81cb6c"",
            ""actions"": [
                {
                    ""name"": ""ItemMove"",
                    ""type"": ""Value"",
                    ""id"": ""80a8b026-e4d6-448f-8385-39f63758a982"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ItemUse"",
                    ""type"": ""Button"",
                    ""id"": ""77337cce-8aed-4890-a57e-32e12fe3ebb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbe0f55c-800e-47d0-ac15-76a6dc25bf81"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99183221-9338-41b0-b17f-2fcfc7918763"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_RouletteTouch = m_Player.FindAction("RouletteTouch", throwIfNotFound: true);
        m_Player_ItemTouch = m_Player.FindAction("ItemTouch", throwIfNotFound: true);
        m_Player_ItemSelect = m_Player.FindAction("ItemSelect", throwIfNotFound: true);
        // ItemControl
        m_ItemControl = asset.FindActionMap("ItemControl", throwIfNotFound: true);
        m_ItemControl_ItemMove = m_ItemControl.FindAction("ItemMove", throwIfNotFound: true);
        m_ItemControl_ItemUse = m_ItemControl.FindAction("ItemUse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_RouletteTouch;
    private readonly InputAction m_Player_ItemTouch;
    private readonly InputAction m_Player_ItemSelect;
    public struct PlayerActions
    {
        private @InputOnBoard m_Wrapper;
        public PlayerActions(@InputOnBoard wrapper) { m_Wrapper = wrapper; }
        public InputAction @RouletteTouch => m_Wrapper.m_Player_RouletteTouch;
        public InputAction @ItemTouch => m_Wrapper.m_Player_ItemTouch;
        public InputAction @ItemSelect => m_Wrapper.m_Player_ItemSelect;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @RouletteTouch.started += instance.OnRouletteTouch;
            @RouletteTouch.performed += instance.OnRouletteTouch;
            @RouletteTouch.canceled += instance.OnRouletteTouch;
            @ItemTouch.started += instance.OnItemTouch;
            @ItemTouch.performed += instance.OnItemTouch;
            @ItemTouch.canceled += instance.OnItemTouch;
            @ItemSelect.started += instance.OnItemSelect;
            @ItemSelect.performed += instance.OnItemSelect;
            @ItemSelect.canceled += instance.OnItemSelect;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @RouletteTouch.started -= instance.OnRouletteTouch;
            @RouletteTouch.performed -= instance.OnRouletteTouch;
            @RouletteTouch.canceled -= instance.OnRouletteTouch;
            @ItemTouch.started -= instance.OnItemTouch;
            @ItemTouch.performed -= instance.OnItemTouch;
            @ItemTouch.canceled -= instance.OnItemTouch;
            @ItemSelect.started -= instance.OnItemSelect;
            @ItemSelect.performed -= instance.OnItemSelect;
            @ItemSelect.canceled -= instance.OnItemSelect;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ItemControl
    private readonly InputActionMap m_ItemControl;
    private List<IItemControlActions> m_ItemControlActionsCallbackInterfaces = new List<IItemControlActions>();
    private readonly InputAction m_ItemControl_ItemMove;
    private readonly InputAction m_ItemControl_ItemUse;
    public struct ItemControlActions
    {
        private @InputOnBoard m_Wrapper;
        public ItemControlActions(@InputOnBoard wrapper) { m_Wrapper = wrapper; }
        public InputAction @ItemMove => m_Wrapper.m_ItemControl_ItemMove;
        public InputAction @ItemUse => m_Wrapper.m_ItemControl_ItemUse;
        public InputActionMap Get() { return m_Wrapper.m_ItemControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ItemControlActions set) { return set.Get(); }
        public void AddCallbacks(IItemControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ItemControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ItemControlActionsCallbackInterfaces.Add(instance);
            @ItemMove.started += instance.OnItemMove;
            @ItemMove.performed += instance.OnItemMove;
            @ItemMove.canceled += instance.OnItemMove;
            @ItemUse.started += instance.OnItemUse;
            @ItemUse.performed += instance.OnItemUse;
            @ItemUse.canceled += instance.OnItemUse;
        }

        private void UnregisterCallbacks(IItemControlActions instance)
        {
            @ItemMove.started -= instance.OnItemMove;
            @ItemMove.performed -= instance.OnItemMove;
            @ItemMove.canceled -= instance.OnItemMove;
            @ItemUse.started -= instance.OnItemUse;
            @ItemUse.performed -= instance.OnItemUse;
            @ItemUse.canceled -= instance.OnItemUse;
        }

        public void RemoveCallbacks(IItemControlActions instance)
        {
            if (m_Wrapper.m_ItemControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IItemControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ItemControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ItemControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ItemControlActions @ItemControl => new ItemControlActions(this);
    public interface IPlayerActions
    {
        void OnRouletteTouch(InputAction.CallbackContext context);
        void OnItemTouch(InputAction.CallbackContext context);
        void OnItemSelect(InputAction.CallbackContext context);
    }
    public interface IItemControlActions
    {
        void OnItemMove(InputAction.CallbackContext context);
        void OnItemUse(InputAction.CallbackContext context);
    }
}
